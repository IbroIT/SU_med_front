#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥–æ–≥–æ.
"""

import json
import os
from pathlib import Path
from collections import defaultdict
import shutil
import sys

def find_duplicate_sections(json_data, path=""):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã –≤ JSON –¥–∞–Ω–Ω—ã—Ö
    """
    duplicates = []
    section_paths = defaultdict(list)
    
    if isinstance(json_data, dict):
        for key, value in json_data.items():
            current_path = f"{path}.{key}" if path else key
            
            if isinstance(value, dict):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É
                section_content = json.dumps(value, sort_keys=True)
                section_paths[f"{key}:{section_content}"].append(current_path)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
                nested_duplicates = find_duplicate_sections(value, current_path)
                duplicates.extend(nested_duplicates)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    for section_key, paths in section_paths.items():
        if len(paths) > 1:
            section_name = section_key.split(':')[0]
            duplicates.append({
                'section_name': section_name,
                'paths': paths,
                'content_hash': section_key.split(':', 1)[1]
            })
    
    return duplicates

def identify_major_duplicates(duplicates):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    major_duplicates = []
    
    for dup in duplicates:
        paths = dup['paths']
        section_name = dup['section_name']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø—É—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å, –∞ –∫–∞–∫–∏–µ —É–¥–∞–ª–∏—Ç—å
        keep_path = None
        remove_paths = []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º
        paths_sorted = sorted(paths, key=len)
        keep_path = paths_sorted[0]
        remove_paths = paths_sorted[1:]
        
        if remove_paths:
            major_duplicates.append({
                'section_name': section_name,
                'keep': keep_path,
                'remove': remove_paths
            })
    
    return major_duplicates

def remove_duplicates_from_data(data, duplicates_to_remove):
    """
    –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    for dup in duplicates_to_remove:
        for remove_path in dup['remove']:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            path_parts = remove_path.split('.')
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
            current = data
            parent = None
            last_key = None
            
            try:
                for i, part in enumerate(path_parts):
                    if i == len(path_parts) - 1:
                        last_key = part
                        parent = current
                        break
                    else:
                        current = current[part]
                
                # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                if parent is not None and last_key in parent:
                    print(f"  ‚ùå –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª: {remove_path}")
                    del parent[last_key]
                
            except (KeyError, TypeError) as e:
                print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª {remove_path}: {e}")
    
    return data

def process_file(file_path, dry_run=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    """
    print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            original_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    data = json.loads(json.dumps(original_data))
    
    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = find_duplicate_sections(data)
    major_duplicates = identify_major_duplicates(duplicates)
    
    if not major_duplicates:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True
    
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(major_duplicates)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–¥–µ–ª–æ–≤:")
    for dup in major_duplicates:
        print(f"  üîÑ –†–∞–∑–¥–µ–ª '{dup['section_name']}':")
        print(f"     ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: {dup['keep']}")
        for remove_path in dup['remove']:
            print(f"     ‚ùå –£–¥–∞–ª—è–µ–º: {remove_path}")
    
    if dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
        return True
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{file_path}.backup"
    shutil.copy2(file_path, backup_path)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print("üßπ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã:")
    cleaned_data = remove_duplicates_from_data(data, major_duplicates)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(cleaned_data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        shutil.copy2(backup_path, file_path)
        print("üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –†–ê–ó–î–ï–õ–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    dry_run = "--dry-run" in sys.argv or "-d" in sys.argv
    if dry_run:
        print("üîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ")
        print("=" * 60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    locales_dir = Path("../src/locales")
    if not locales_dir.exists():
        locales_dir = Path("src/locales")
    if not locales_dir.exists():
        locales_dir = Path("locales")
    
    if not locales_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return 1
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translation_files = []
    for lang_dir in locales_dir.iterdir():
        if lang_dir.is_dir():
            translation_file = lang_dir / "translation.json"
            if translation_file.exists():
                translation_files.append(translation_file)
    
    if not translation_files:
        print("‚ùå –§–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return 1
    
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {len(translation_files)}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    success_count = 0
    for file_path in translation_files:
        if process_file(file_path, dry_run):
            success_count += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    if success_count == len(translation_files):
        if dry_run:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        else:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            print("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup")
    else:
        print(f"‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(translation_files)}")
        if not dry_run:
            print("üîÑ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    
    return 0 if success_count == len(translation_files) else 1

if __name__ == "__main__":
    exit(main())
