#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
"""

import json
import os
from pathlib import Path
from collections import defaultdict, Counter

def get_all_section_names(json_data, parent_path=""):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ (–∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è) –∏–∑ JSON
    """
    sections = []
    
    if isinstance(json_data, dict):
        for key, value in json_data.items():
            current_path = f"{parent_path}.{key}" if parent_path else key
            sections.append((key, current_path, type(value).__name__))
            
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            if isinstance(value, dict):
                nested_sections = get_all_section_names(value, current_path)
                sections.extend(nested_sections)
    
    return sections

def analyze_structure(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞"""
    print(f"\nüìÅ –§–∞–π–ª: {file_path}")
    print("=" * 50)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    sections = get_all_section_names(data)
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
    section_counter = Counter(section[0] for section in sections)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–Ω–∞—á–µ–Ω–∏—è
    sections_by_type = defaultdict(list)
    for name, path, value_type in sections:
        sections_by_type[value_type].append((name, path))
    
    print(f"üìä –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(sections)}")
    print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤: {len(section_counter)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã-—Å–ª–æ–≤–∞—Ä–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
    dict_sections = sections_by_type.get('dict', [])
    print(f"\nüìÅ –†–∞–∑–¥–µ–ª—ã-—Å–ª–æ–≤–∞—Ä–∏ ({len(dict_sections)}):")
    for name, path in sorted(dict_sections):
        count = section_counter[name]
        if count > 1:
            print(f"   üîÑ {name} (–ø—É—Ç—å: {path}) - –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑ ‚ö†Ô∏è")
        else:
            print(f"   üìÇ {name} (–ø—É—Ç—å: {path})")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = {name: count for name, count in section_counter.items() if count > 1}
    if duplicates:
        print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ ({len(duplicates)}):")
        for name, count in sorted(duplicates.items()):
            print(f"   üîÑ '{name}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª
            matching_paths = [path for section_name, path, _ in sections if section_name == name]
            for i, path in enumerate(matching_paths, 1):
                print(f"      {i}. {path}")
    else:
        print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def main():
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í –ü–ï–†–ï–í–û–î–û–í")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    locales_dir = Path("../src/locales")
    if not locales_dir.exists():
        locales_dir = Path("src/locales")
    if not locales_dir.exists():
        locales_dir = Path("locales")
    
    if not locales_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    translation_files = []
    for lang_dir in locales_dir.iterdir():
        if lang_dir.is_dir():
            translation_file = lang_dir / "translation.json"
            if translation_file.exists():
                translation_files.append(translation_file)
    
    if not translation_files:
        print("‚ùå –§–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in translation_files:
        analyze_structure(file_path)

if __name__ == "__main__":
    main()
