import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

const OnlineApplication = () => {
  const { t } = useTranslation();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Step 1: Program selection
    program: '',
    programDetails: null,
    
    // Step 2: Personal information
    firstName: '',
    lastName: '',
    middleName: '',
    birthDate: '',
    gender: '',
    phone: '',
    email: '',
    address: '',
    
    // Step 3: Education
    schoolName: '',
    graduationYear: '',
    certificateNumber: '',
    ortScore: '',
    subjects: {
      biology: '',
      chemistry: '',
      physics: '',
      mathematics: ''
    },
    
    // Step 4: Documents
    documents: {
      certificate: null,
      passport: null,
      medical: null,
      photos: null,
      ortCertificate: null
    },
    
    // Step 5: Confirmation
    agreeTerms: false,
    agreePrivacy: false
  });

  const [isDraftSaved, setIsDraftSaved] = useState(false);
  const [errors, setErrors] = useState({});
  const [searchTerm, setSearchTerm] = useState('');

  const programs = [
    {
      id: 'medicine',
      name: '–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ',
      duration: '6 –ª–µ—Ç',
      cost: '170,000 —Å–æ–º/–≥–æ–¥',
      requirements: '–û–†–¢: 120+, –ë–∏–æ–ª–æ–≥–∏—è, –•–∏–º–∏—è',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–∞—á–µ–π –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏'
    },
    {
      id: 'dentistry',
      name: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
      duration: '5 –ª–µ—Ç',
      cost: '190,000 —Å–æ–º/–≥–æ–¥',
      requirements: '–û–†–¢: 110+, –ë–∏–æ–ª–æ–≥–∏—è, –•–∏–º–∏—è',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–∞—á–µ–π-—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤'
    },
    {
      id: 'pharmacy',
      name: '–§–∞—Ä–º–∞—Ü–∏—è',
      duration: '5 –ª–µ—Ç',
      cost: '150,000 —Å–æ–º/–≥–æ–¥',
      requirements: '–û–†–¢: 100+, –•–∏–º–∏—è, –ë–∏–æ–ª–æ–≥–∏—è',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≤–∏–∑–æ—Ä–æ–≤ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–æ–≤'
    },
    {
      id: 'nursing',
      name: '–°–µ—Å—Ç—Ä–∏–Ω—Å–∫–æ–µ –¥–µ–ª–æ',
      duration: '4 –≥–æ–¥–∞',
      cost: '130,000 —Å–æ–º/–≥–æ–¥',
      requirements: '–û–†–¢: 90+, –ë–∏–æ–ª–æ–≥–∏—è',
      description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Ç–µ—Ä'
    }
  ];

  const steps = [
    { id: 1, title: '–í—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã', icon: 'üìã' },
    { id: 2, title: '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', icon: 'üë§' },
    { id: 3, title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üéì' },
    { id: 4, title: '–î–æ–∫—É–º–µ–Ω—Ç—ã', icon: 'üìÑ' },
    { id: 5, title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', icon: '‚úÖ' }
  ];

  // Auto-save draft
  useEffect(() => {
    const timer = setTimeout(() => {
      localStorage.setItem('applicationDraft', JSON.stringify(formData));
      setIsDraftSaved(true);
      setTimeout(() => setIsDraftSaved(false), 2000);
    }, 1000);

    return () => clearTimeout(timer);
  }, [formData]);

  // Load draft on component mount
  useEffect(() => {
    const draft = localStorage.getItem('applicationDraft');
    if (draft) {
      try {
        const parsedDraft = JSON.parse(draft);
        setFormData(parsedDraft);
      } catch (error) {
        console.error('Error loading draft:', error);
      }
    }
  }, []);

  const updateFormData = (updates) => {
    setFormData(prev => ({ ...prev, ...updates }));
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1:
        if (!formData.program) newErrors.program = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è';
        break;
      
      case 2:
        if (!formData.firstName) newErrors.firstName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
        else if (formData.firstName.length < 2) newErrors.firstName = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        
        if (!formData.lastName) newErrors.lastName = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é';
        else if (formData.lastName.length < 2) newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
        
        if (!formData.birthDate) newErrors.birthDate = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è';
        else {
          const birthYear = new Date(formData.birthDate).getFullYear();
          const currentYear = new Date().getFullYear();
          const age = currentYear - birthYear;
          if (age < 16 || age > 35) newErrors.birthDate = '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 35 –ª–µ—Ç';
        }
        
        if (!formData.phone) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        else if (!/^\+996\s?\d{3}\s?\d{3}\s?\d{3}$/.test(formData.phone)) {
          newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996 XXX XXX XXX';
        }
        
        if (!formData.email) newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';
        else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        break;
      
      case 3:
        if (!formData.schoolName) newErrors.schoolName = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã';
        if (!formData.graduationYear) newErrors.graduationYear = '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è';
        if (!formData.ortScore) newErrors.ortScore = '–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª –û–†–¢';
        else if (formData.ortScore < 0 || formData.ortScore > 240) {
          newErrors.ortScore = '–ë–∞–ª–ª –û–†–¢ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 240';
        }
        break;
      
      case 4:
        if (!formData.documents.certificate) newErrors.certificate = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ç';
        else if (!validateFile(formData.documents.certificate, ['pdf', 'jpg', 'jpeg', 'png'], 5)) {
          newErrors.certificate = '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF, JPG –∏–ª–∏ PNG —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5 –ú–ë';
        }
        
        if (!formData.documents.passport) newErrors.passport = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç';
        else if (!validateFile(formData.documents.passport, ['pdf', 'jpg', 'jpeg', 'png'], 5)) {
          newErrors.passport = '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF, JPG –∏–ª–∏ PNG —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5 –ú–ë';
        }
        
        if (!formData.documents.medical) newErrors.medical = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥—Å–ø—Ä–∞–≤–∫—É';
        else if (!validateFile(formData.documents.medical, ['pdf', 'jpg', 'jpeg', 'png'], 5)) {
          newErrors.medical = '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF, JPG –∏–ª–∏ PNG —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5 –ú–ë';
        }
        break;
      
      case 5:
        if (!formData.agreeTerms) newErrors.agreeTerms = '–°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏';
        if (!formData.agreePrivacy) newErrors.agreePrivacy = '–°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö';
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateFile = (file, allowedTypes, maxSizeMB) => {
    if (!file) return false;
    
    const fileExtension = file.name.split('.').pop().toLowerCase();
    const fileSizeMB = file.size / (1024 * 1024);
    
    return allowedTypes.includes(fileExtension) && fileSizeMB <= maxSizeMB;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 5));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleFileUpload = (fieldName, file) => {
    updateFormData({
      documents: {
        ...formData.documents,
        [fieldName]: file
      }
    });
  };

  const submitApplication = () => {
    if (validateStep(5)) {
      // Here you would send the application to your backend
      console.log('Application submitted:', formData);
      alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      localStorage.removeItem('applicationDraft');
    }
  };

  const saveDraft = () => {
    localStorage.setItem('applicationDraft', JSON.stringify(formData));
    setIsDraftSaved(true);
    setTimeout(() => setIsDraftSaved(false), 3000);
  };

  const clearDraft = () => {
    localStorage.removeItem('applicationDraft');
    setFormData({
      program: '',
      programDetails: null,
      firstName: '',
      lastName: '',
      middleName: '',
      birthDate: '',
      gender: '',
      phone: '',
      email: '',
      address: '',
      schoolName: '',
      graduationYear: '',
      certificateNumber: '',
      ortScore: '',
      subjects: {
        biology: '',
        chemistry: '',
        physics: '',
        mathematics: ''
      },
      documents: {
        certificate: null,
        passport: null,
        medical: null,
        photos: null,
        ortCertificate: null
      },
      agreeTerms: false,
      agreePrivacy: false
    });
    setCurrentStep(1);
    setErrors({});
  };

  const renderStep1 = () => {
    const filteredPrograms = programs.filter(program =>
      program.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      program.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
      <div className="space-y-6">
        <div className="text-center mb-8">
          <h3 className="text-2xl font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è</h3>
          <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å</p>
        </div>
        
        {/* Search input */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
          </label>
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <div className="grid gap-4">
          {filteredPrograms.length > 0 ? filteredPrograms.map(program => (
            <div
              key={program.id}
              className={`border-2 rounded-lg p-6 cursor-pointer transition-all ${
                formData.program === program.id
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => {
                updateFormData({ program: program.id, programDetails: program });
                setErrors({ ...errors, program: null });
              }}
            >
              <div className="flex justify-between items-start mb-3">
                <h4 className="text-lg font-semibold text-gray-800">{program.name}</h4>
                <span className="text-sm text-blue-600 font-medium">{program.duration}</span>
              </div>
              <p className="text-gray-600 text-sm mb-3">{program.description}</p>
              <div className="flex flex-wrap gap-4 text-sm text-gray-500">
                <span>üí∞ {program.cost}</span>
                <span>üìã {program.requirements}</span>
              </div>
            </div>
          )) : (
            <div className="text-center py-8 text-gray-500">
              <p>–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchTerm}"</p>
            </div>
          )}
        </div>
        
        {errors.program && (
          <div className="text-red-600 text-sm">{errors.program}</div>
        )}
      </div>
    );
  };

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h3 className="text-2xl font-bold text-gray-800 mb-2">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
        <p className="text-gray-600">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ</p>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –§–∞–º–∏–ª–∏—è *
          </label>
          <input
            type="text"
            value={formData.lastName}
            onChange={(e) => updateFormData({ lastName: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.lastName && <div className="text-red-600 text-sm mt-1">{errors.lastName}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ò–º—è *
          </label>
          <input
            type="text"
            value={formData.firstName}
            onChange={(e) => updateFormData({ firstName: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.firstName && <div className="text-red-600 text-sm mt-1">{errors.firstName}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –û—Ç—á–µ—Å—Ç–≤–æ
          </label>
          <input
            type="text"
            value={formData.middleName}
            onChange={(e) => updateFormData({ middleName: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *
          </label>
          <input
            type="date"
            value={formData.birthDate}
            onChange={(e) => updateFormData({ birthDate: e.target.value })}
            max={new Date(new Date().getFullYear() - 16, new Date().getMonth(), new Date().getDate()).toISOString().split('T')[0]}
            min={new Date(new Date().getFullYear() - 35, new Date().getMonth(), new Date().getDate()).toISOString().split('T')[0]}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.birthDate && <div className="text-red-600 text-sm mt-1">{errors.birthDate}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ–ª
          </label>
          <select
            value={formData.gender}
            onChange={(e) => updateFormData({ gender: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
            <option value="male">–ú—É–∂—Å–∫–æ–π</option>
            <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¢–µ–ª–µ—Ñ–æ–Ω *
          </label>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => {
              let value = e.target.value;
              // Auto-format phone number
              if (!value.startsWith('+996')) {
                value = '+996 ' + value.replace(/^\+996\s?/, '');
              }
              updateFormData({ phone: value });
            }}
            placeholder="+996 XXX XXX XXX"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.phone && <div className="text-red-600 text-sm mt-1">{errors.phone}</div>}
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Email *
          </label>
          <input
            type="email"
            value={formData.email}
            onChange={(e) => updateFormData({ email: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.email && <div className="text-red-600 text-sm mt-1">{errors.email}</div>}
        </div>
        
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ê–¥—Ä–µ—Å
          </label>
          <textarea
            value={formData.address}
            onChange={(e) => updateFormData({ address: e.target.value })}
            rows="3"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h3 className="text-2xl font-bold text-gray-800 mb-2">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>
        <p className="text-gray-600">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏</p>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6">
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã/–ª–∏—Ü–µ—è *
          </label>
          <input
            type="text"
            value={formData.schoolName}
            onChange={(e) => updateFormData({ schoolName: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.schoolName && <div className="text-red-600 text-sm mt-1">{errors.schoolName}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è *
          </label>
          <select
            value={formData.graduationYear}
            onChange={(e) => updateFormData({ graduationYear: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥</option>
            {Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - i).map(year => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
          {errors.graduationYear && <div className="text-red-600 text-sm mt-1">{errors.graduationYear}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ù–æ–º–µ—Ä –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞
          </label>
          <input
            type="text"
            value={formData.certificateNumber}
            onChange={(e) => updateFormData({ certificateNumber: e.target.value })}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ë–∞–ª–ª –û–†–¢ *
          </label>
          <input
            type="number"
            value={formData.ortScore}
            onChange={(e) => updateFormData({ ortScore: e.target.value })}
            min="0"
            max="240"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {errors.ortScore && <div className="text-red-600 text-sm mt-1">{errors.ortScore}</div>}
        </div>
      </div>
      
      <div className="bg-gray-50 p-6 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-4">–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h4>
        <div className="grid md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ë–∏–æ–ª–æ–≥–∏—è
            </label>
            <input
              type="number"
              value={formData.subjects.biology}
              onChange={(e) => updateFormData({
                subjects: { ...formData.subjects, biology: e.target.value }
              })}
              min="1"
              max="5"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –•–∏–º–∏—è
            </label>
            <input
              type="number"
              value={formData.subjects.chemistry}
              onChange={(e) => updateFormData({
                subjects: { ...formData.subjects, chemistry: e.target.value }
              })}
              min="1"
              max="5"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –§–∏–∑–∏–∫–∞
            </label>
            <input
              type="number"
              value={formData.subjects.physics}
              onChange={(e) => updateFormData({
                subjects: { ...formData.subjects, physics: e.target.value }
              })}
              min="1"
              max="5"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            </label>
            <input
              type="number"
              value={formData.subjects.mathematics}
              onChange={(e) => updateFormData({
                subjects: { ...formData.subjects, mathematics: e.target.value }
              })}
              min="1"
              max="5"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h3 className="text-2xl font-bold text-gray-800 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
        <p className="text-gray-600">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</p>
      </div>
      
      <div className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ *
          </label>
          <input
            type="file"
            accept=".pdf,.jpg,.jpeg,.png"
            onChange={(e) => handleFileUpload('certificate', e.target.files[0])}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {formData.documents.certificate && (
            <div className="text-green-600 text-sm mt-1 flex items-center">
              ‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {formData.documents.certificate.name}
            </div>
          )}
          {errors.certificate && <div className="text-red-600 text-sm mt-1">{errors.certificate}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–∞—Å–ø–æ—Ä—Ç (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) *
          </label>
          <input
            type="file"
            accept=".pdf,.jpg,.jpeg,.png"
            onChange={(e) => handleFileUpload('passport', e.target.files[0])}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {formData.documents.passport && (
            <div className="text-green-600 text-sm mt-1 flex items-center">
              ‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {formData.documents.passport.name}
            </div>
          )}
          {errors.passport && <div className="text-red-600 text-sm mt-1">{errors.passport}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ 086–£ *
          </label>
          <input
            type="file"
            accept=".pdf,.jpg,.jpeg,.png"
            onChange={(e) => handleFileUpload('medical', e.target.files[0])}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {formData.documents.medical && (
            <div className="text-green-600 text-sm mt-1 flex items-center">
              ‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {formData.documents.medical.name}
            </div>
          )}
          {errors.medical && <div className="text-red-600 text-sm mt-1">{errors.medical}</div>}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3x4 —Å–º
          </label>
          <input
            type="file"
            accept=".jpg,.jpeg,.png"
            multiple
            onChange={(e) => handleFileUpload('photos', e.target.files)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {formData.documents.photos && formData.documents.photos.length > 0 && (
            <div className="text-green-600 text-sm mt-1 flex items-center">
              ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {formData.documents.photos.length} —à—Ç.
            </div>
          )}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –û–†–¢
          </label>
          <input
            type="file"
            accept=".pdf,.jpg,.jpeg,.png"
            onChange={(e) => handleFileUpload('ortCertificate', e.target.files[0])}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          {formData.documents.ortCertificate && (
            <div className="text-green-600 text-sm mt-1 flex items-center">
              ‚úì –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {formData.documents.ortCertificate.name}
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-semibold text-blue-800 mb-2">üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, JPG –∏–ª–∏ PNG</li>
          <li>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 5 –ú–ë</li>
          <li>‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏ –∏ —á–∏—Ç–∞–µ–º—ã–º–∏</li>
          <li>‚Ä¢ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ</li>
          <li>‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—Ä–æ–º 3x4 —Å–º</li>
        </ul>
      </div>
    </div>
  );

  const renderStep5 = () => (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h3 className="text-2xl font-bold text-gray-800 mb-2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</h3>
        <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π</p>
      </div>
      
      <div className="space-y-6">
        {/* Program Details */}
        <div className="bg-green-50 p-6 rounded-lg border-l-4 border-green-600">
          <div className="flex items-center mb-3">
            <span className="text-2xl mr-3">üìã</span>
            <h4 className="font-semibold text-gray-800 text-lg">–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h4>
          </div>
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <p className="font-medium text-gray-800">{formData.programDetails?.name}</p>
              <p className="text-gray-600 text-sm">{formData.programDetails?.description}</p>
            </div>
            <div className="text-sm text-gray-600">
              <p>–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: {formData.programDetails?.duration}</p>
              <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: {formData.programDetails?.cost}</p>
              <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {formData.programDetails?.requirements}</p>
            </div>
          </div>
        </div>
        
        {/* Personal Information */}
        <div className="bg-blue-50 p-6 rounded-lg border-l-4 border-blue-600">
          <div className="flex items-center mb-3">
            <span className="text-2xl mr-3">üë§</span>
            <h4 className="font-semibold text-gray-800 text-lg">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
          </div>
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <p className="font-medium text-gray-800">
                {formData.lastName} {formData.firstName} {formData.middleName}
              </p>
              <p className="text-gray-600 text-sm">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {formData.birthDate}</p>
              {formData.gender && <p className="text-gray-600 text-sm">–ü–æ–ª: {formData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>}
            </div>
            <div className="text-sm text-gray-600">
              <p>üìû {formData.phone}</p>
              <p>‚úâÔ∏è {formData.email}</p>
              {formData.address && <p>üè† {formData.address}</p>}
            </div>
          </div>
        </div>
        
        {/* Education */}
        <div className="bg-yellow-50 p-6 rounded-lg border-l-4 border-yellow-600">
          <div className="flex items-center mb-3">
            <span className="text-2xl mr-3">üéì</span>
            <h4 className="font-semibold text-gray-800 text-lg">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h4>
          </div>
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <p className="font-medium text-gray-800">{formData.schoolName}</p>
              <p className="text-gray-600 text-sm">–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formData.graduationYear}</p>
              {formData.certificateNumber && <p className="text-gray-600 text-sm">–ê—Ç—Ç–µ—Å—Ç–∞—Ç ‚Ññ: {formData.certificateNumber}</p>}
            </div>
            <div className="text-sm text-gray-600">
              <p>–û–†–¢: {formData.ortScore} –±–∞–ª–ª–æ–≤</p>
              {Object.entries(formData.subjects).some(([, value]) => value) && (
                <div className="mt-2">
                  <p className="font-medium">–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:</p>
                  {Object.entries(formData.subjects).map(([subject, grade]) => 
                    grade && (
                      <span key={subject} className="inline-block mr-3">
                        {subject === 'biology' && '–ë–∏–æ–ª–æ–≥–∏—è'} 
                        {subject === 'chemistry' && '–•–∏–º–∏—è'} 
                        {subject === 'physics' && '–§–∏–∑–∏–∫–∞'} 
                        {subject === 'mathematics' && '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'}: {grade}
                      </span>
                    )
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* Documents */}
        <div className="bg-purple-50 p-6 rounded-lg border-l-4 border-purple-600">
          <div className="flex items-center mb-3">
            <span className="text-2xl mr-3">üìÑ</span>
            <h4 className="font-semibold text-gray-800 text-lg">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h4>
          </div>
          <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-600">
            <div>
              <p className="flex items-center">
                {formData.documents.certificate ? '‚úÖ' : '‚ùå'} 
                <span className="ml-2">–ê—Ç—Ç–µ—Å—Ç–∞—Ç</span>
              </p>
              <p className="flex items-center">
                {formData.documents.passport ? '‚úÖ' : '‚ùå'} 
                <span className="ml-2">–ü–∞—Å–ø–æ—Ä—Ç</span>
              </p>
              <p className="flex items-center">
                {formData.documents.medical ? '‚úÖ' : '‚ùå'} 
                <span className="ml-2">–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞</span>
              </p>
            </div>
            <div>
              <p className="flex items-center">
                {formData.documents.photos?.length > 0 ? '‚úÖ' : '‚ö™'} 
                <span className="ml-2">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
              </p>
              <p className="flex items-center">
                {formData.documents.ortCertificate ? '‚úÖ' : '‚ö™'} 
                <span className="ml-2">–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –û–†–¢ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>
              </p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Edit buttons */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-3">–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?</h4>
        <div className="flex flex-wrap gap-2">
          <button 
            onClick={() => setCurrentStep(1)}
            className="px-3 py-1 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200"
          >
            ‚úèÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞
          </button>
          <button 
            onClick={() => setCurrentStep(2)}
            className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200"
          >
            ‚úèÔ∏è –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          </button>
          <button 
            onClick={() => setCurrentStep(3)}
            className="px-3 py-1 bg-yellow-100 text-yellow-700 rounded text-sm hover:bg-yellow-200"
          >
            ‚úèÔ∏è –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
          </button>
          <button 
            onClick={() => setCurrentStep(4)}
            className="px-3 py-1 bg-purple-100 text-purple-700 rounded text-sm hover:bg-purple-200"
          >
            ‚úèÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã
          </button>
        </div>
      </div>
      
      <div className="space-y-4">
        <label className="flex items-start">
          <input
            type="checkbox"
            checked={formData.agreeTerms}
            onChange={(e) => updateFormData({ agreeTerms: e.target.checked })}
            className="mt-1 mr-3"
          />
          <span className="text-sm text-gray-700">
            –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) —Å{' '}
            <a href="#" className="text-blue-600 underline">–ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</a>
            {' '}–∏{' '}
            <a href="#" className="text-blue-600 underline">—É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è</a>
          </span>
        </label>
        {errors.agreeTerms && <div className="text-red-600 text-sm">{errors.agreeTerms}</div>}
        
        <label className="flex items-start">
          <input
            type="checkbox"
            checked={formData.agreePrivacy}
            onChange={(e) => updateFormData({ agreePrivacy: e.target.checked })}
            className="mt-1 mr-3"
          />
          <span className="text-sm text-gray-700">
            –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞{' '}
            <a href="#" className="text-blue-600 underline">–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>
          </span>
        </label>
        {errors.agreePrivacy && <div className="text-red-600 text-sm">{errors.agreePrivacy}</div>}
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1: return renderStep1();
      case 2: return renderStep2();
      case 3: return renderStep3();
      case 4: return renderStep4();
      case 5: return renderStep5();
      default: return renderStep1();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-green-600 to-green-800 text-white py-16">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              –û–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫–∞
            </h1>
            <p className="text-xl opacity-90">
              –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –°–∞–ª—ã–º–±–µ–∫–æ–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
            </p>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-12">
        {/* Progress Bar */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <div className="flex justify-between items-center mb-6">
            {steps.map((step, index) => (
              <div
                key={step.id}
                className={`flex items-center ${index < steps.length - 1 ? 'flex-1' : ''}`}
              >
                <div className={`flex items-center justify-center w-12 h-12 rounded-full text-sm font-medium transition-all ${
                  currentStep >= step.id
                    ? 'bg-green-600 text-white shadow-lg'
                    : currentStep === step.id - 1
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {currentStep > step.id ? '‚úì' : step.icon}
                </div>
                {index < steps.length - 1 && (
                  <div className={`flex-1 h-2 mx-4 rounded-full transition-all ${
                    currentStep > step.id ? 'bg-green-600' : 'bg-gray-200'
                  }`}></div>
                )}
              </div>
            ))}
          </div>
          
          <div className="text-center">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              –®–∞–≥ {currentStep} –∏–∑ {steps.length}: {steps[currentStep - 1].title}
            </h2>
            <div className="w-full bg-gray-200 rounded-full h-2 mt-4">
              <div 
                className="bg-green-600 h-2 rounded-full transition-all duration-300" 
                style={{ width: `${(currentStep / steps.length) * 100}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round((currentStep / steps.length) * 100)}%
            </p>
          </div>
        </div>

        {/* Form Content */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          {renderCurrentStep()}
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                currentStep === 1
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-600 text-white hover:bg-gray-700 shadow-md'
              }`}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            
            <button
              onClick={saveDraft}
              className="px-4 py-2 bg-yellow-500 text-white rounded-lg font-medium hover:bg-yellow-600 text-sm shadow-md"
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
            </button>
            
            <button
              onClick={clearDraft}
              className="px-4 py-2 bg-red-500 text-white rounded-lg font-medium hover:bg-red-600 text-sm shadow-md"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
            </button>
          </div>
          
          <div className="flex items-center space-x-4">
            {isDraftSaved && (
              <span className="text-sm text-green-600 font-medium animate-pulse">
                ‚úì –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
              </span>
            )}
            
            {currentStep < 5 ? (
              <button
                onClick={nextStep}
                className="px-8 py-3 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 shadow-md transition-all"
              >
                –î–∞–ª–µ–µ ‚Üí
              </button>
            ) : (
              <button
                onClick={submitApplication}
                className="px-10 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 shadow-lg transition-all"
              >
                üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </button>
            )}
          </div>
        </div>

        {/* Help Information */}
        <div className="mt-12 bg-blue-50 p-6 rounded-lg">
          <h4 className="font-semibold text-blue-800 mb-3">
            üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏?
          </h4>
          <div className="grid md:grid-cols-2 gap-4 text-sm text-blue-700">
            <div>
              <p>üìû –¢–µ–ª–µ—Ñ–æ–Ω: +996 312 123 456</p>
              <p>‚úâÔ∏è Email: admission@salymbekov.edu.kg</p>
            </div>
            <div>
              <p>üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 09:00-18:00</p>
              <p>üíæ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OnlineApplication;
