import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

const AcademicBuildings = () => {
  const { t, i18n } = useTranslation();
  const [buildings, setBuildings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedBuilding, setSelectedBuilding] = useState(null);
  const [showMap, setShowMap] = useState(false);
  const [viewMode, setViewMode] = useState('grid'); // 'grid' –∏–ª–∏ 'list'
  const [activeTab, setActiveTab] = useState('overview'); // –î–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–¥–∞–Ω–∏—è

  useEffect(() => {
    // Fetch academic buildings from Django API
    const fetchBuildings = async () => {
      try {
        const response = await fetch('http://localhost:8000/api/infrastructure/academic-buildings/');
        if (response.ok) {
          const data = await response.json();
          const buildingsData = data.results || data;
          setBuildings(buildingsData);
        } else {
          console.error('Failed to fetch academic buildings:', response.statusText);
          // Fallback to mock data if API fails
          setBuildings(getMockBuildings());
        }
      } catch (error) {
        console.error('Error fetching academic buildings:', error);
        // Fallback to mock data if API fails
        setBuildings(getMockBuildings());
      } finally {
        setLoading(false);
      }
    };

    fetchBuildings();
  }, []);

  const getMockBuildings = () => {
    return [
      {
        id: 1,
        name: {
          ru: "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å",
          kg: "–ù–µ–≥–∏–∑–≥–∏ –æ–∫—É—É –∫–æ—Ä–ø—É—Å—É",
          en: "Main Academic Building"
        },
        address: {
          ru: "–≥. –ë–∏—à–∫–µ–∫, —É–ª. –ê—Ö—É–Ω–±–∞–µ–≤–∞, 92",
          kg: "–ë–∏—à–∫–µ–∫ —à–∞–∞—Ä—ã, –ê—Ö—É–Ω–±–∞–µ–≤ –∫”©—á”©—Å“Ø, 92",
          en: "Bishkek, Akhunbaev Street, 92"
        },
        description: {
          ru: "–û—Å–Ω–æ–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Å –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–ª–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ñ–∏—Å–∞–º–∏",
          kg: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Ç–∏–Ω –Ω–µ–≥–∏–∑–≥–∏ –∏–º–∞—Ä–∞—Ç—ã –ª–µ–∫—Ü–∏—è–ª—ã–∫ –∑–∞–ª–¥–∞—Ä –∂–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–¥–∏–∫ –∫–µ“£—Å–µ–ª–µ—Ä –º–µ–Ω–µ–Ω",
          en: "Main university building with lecture halls and administrative offices"
        },
        floors: 5,
        yearBuilt: 1998,
        totalArea: "12,500 –º¬≤",
        facilities: [
          {
            name: { ru: "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ª—ã", kg: "–õ–µ–∫—Ü–∏—è–ª—ã–∫ –∑–∞–ª–¥–∞—Ä", en: "Lecture halls" },
            count: 12,
            capacity: "50-200 —á–µ–ª–æ–≤–µ–∫",
            icon: "üéì"
          },
          {
            name: { ru: "–ê—É–¥–∏—Ç–æ—Ä–∏–∏", kg: "–ê—É–¥–∏—Ç–æ—Ä–∏—è–ª–∞—Ä", en: "Classrooms" },
            count: 25,
            capacity: "20-40 —á–µ–ª–æ–≤–µ–∫",
            icon: "üìö"
          },
          {
            name: { ru: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∫–ª–∞—Å—Å—ã", kg: "–ö–æ–º–ø—å—é—Ç–µ—Ä–¥–∏–∫ –∫–ª–∞—Å—Å—Ç–∞—Ä", en: "Computer labs" },
            count: 4,
            capacity: "20-30 —á–µ–ª–æ–≤–µ–∫",
            icon: "üíª"
          },
          {
            name: { ru: "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", kg: "–ö–∏—Ç–µ–ø–∫–∞–Ω–∞", en: "Library" },
            count: 1,
            capacity: "100 –º–µ—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è",
            icon: "üìñ"
          }
        ],
        photos: [
          { type: "facade", url: "/images/main_building_facade.jpg", caption: { ru: "–§–∞—Å–∞–¥", kg: "–§–∞—Å–∞–¥", en: "Facade" } },
          { type: "lobby", url: "/images/main_building_lobby.jpg", caption: { ru: "–•–æ–ª–ª", kg: "–•–æ–ª–ª", en: "Lobby" } },
          { type: "lecture_hall", url: "/images/main_lecture_hall.jpg", caption: { ru: "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ª", kg: "–õ–µ–∫—Ü–∏—è–ª—ã–∫ –∑–∞–ª", en: "Lecture Hall" } },
          { type: "library", url: "/images/main_library.jpg", caption: { ru: "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", kg: "–ö–∏—Ç–µ–ø–∫–∞–Ω–∞", en: "Library" } }
        ],
        coordinates: { lat: 42.8746, lng: 74.5698 },
        workingHours: {
          ru: "–ü–Ω-–ü—Ç: 8:00-20:00, –°–±: 9:00-16:00",
          kg: "–î“Ø–π-–ñ—É–º: 8:00-20:00, –ò—à–µ–º–±–∏: 9:00-16:00",
          en: "Mon-Fri: 8:00-20:00, Sat: 9:00-16:00"
        },
        contacts: {
          phone: "+996 312 123-001",
          email: "mainbuilding@salymbekov.edu.kg"
        }
      },
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏...
    ];
  };

  const getCurrentLanguage = () => {
    return ['ru', 'kg', 'en'].includes(i18n.language) ? i18n.language : 'ru';
  };

  // Helper function to get translated field value
  const getTranslatedField = (obj, fieldPrefix) => {
    const lang = getCurrentLanguage();
    if (obj[`${fieldPrefix}_${lang}`]) return obj[`${fieldPrefix}_${lang}`];
    if (obj[fieldPrefix] && typeof obj[fieldPrefix] === 'object' && obj[fieldPrefix][lang]) {
      return obj[fieldPrefix][lang];
    }
    if (obj[fieldPrefix] && typeof obj[fieldPrefix] === 'object' && obj[fieldPrefix]['ru']) {
      return obj[fieldPrefix]['ru'];
    }
    return obj[fieldPrefix] || '';
  };

  if (loading) {
    return (
      <div className="min-h-screen pt-20 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">{t('loading')}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-20 bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-800 mb-4">
            {t('academicBuildings.title', '–£—á–µ–±–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞')}
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            {t('academicBuildings.subtitle', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')}
          </p>
          
          <div className="flex flex-col sm:flex-row justify-center items-center gap-4">
            <button
              onClick={() => setShowMap(!showMap)}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-all duration-300 inline-flex items-center shadow-md hover:shadow-lg"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {showMap ? t('academicBuildings.hideMap', '–°–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É') : t('academicBuildings.showMap', '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∫–∞–º–ø—É—Å–∞')}
            </button>
            
            <div className="bg-white rounded-lg p-1 shadow-md flex">
              <button 
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded-md ${viewMode === 'grid' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                </svg>
              </button>
              <button 
                onClick={() => setViewMode('list')}
                className={`p-2 rounded-md ${viewMode === 'list' ? 'bg-blue-100 text-blue-600' : 'text-gray-600'}`}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Campus Map */}
        {showMap && (
          <div className="mb-12 bg-white rounded-2xl shadow-xl p-6 transition-all duration-500">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
              <svg className="w-6 h-6 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              {t('academicBuildings.campusMap', '–ö–∞—Ä—Ç–∞ –∫–∞–º–ø—É—Å–∞')}
            </h2>
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-8 text-center">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto">
                {buildings.map((building, index) => (
                  <div 
                    key={building.id} 
                    className="bg-white p-4 rounded-xl shadow-md border-2 border-blue-100 hover:border-blue-300 transition-all duration-300 cursor-pointer hover:shadow-lg"
                    onClick={() => {
                      setSelectedBuilding(building.id);
                      document.getElementById(`building-${building.id}`)?.scrollIntoView({ behavior: 'smooth' });
                    }}
                  >
                    <div className="text-2xl font-bold text-blue-600 mb-2">{index + 1}</div>
                    <div className="text-sm font-medium text-gray-800">
                      {getTranslatedField(building, 'name')}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {getTranslatedField(building, 'address')}
                    </div>
                  </div>
                ))}
              </div>
              <p className="text-gray-600 mt-6 text-sm bg-white p-3 rounded-lg inline-block">
                {t('academicBuildings.mapNote', '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.')}
              </p>
            </div>
          </div>
        )}

        {/* Buildings Grid/List View */}
        <div className={viewMode === 'grid' ? 'grid md:grid-cols-2 lg:grid-cols-3 gap-6' : 'space-y-6'}>
          {buildings.map((building) => (
            <div 
              key={building.id} 
              id={`building-${building.id}`}
              className={`bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl ${viewMode === 'list' && 'flex'}`}
            >
              <div className={viewMode === 'list' ? 'w-1/3' : ''}>
                <div className="relative">
                  <img
                    src={building.photo || building.photo_url ||
                      (building.photos && building.photos.find(p => p.type === 'facade')?.url) ||
                      `https://via.placeholder.com/400x300?text=${encodeURIComponent(getTranslatedField(building, 'name'))}`}
                    alt={getTranslatedField(building, 'name')}
                    className={`w-full ${viewMode === 'list' ? 'h-48' : 'h-48 md:h-56'} object-cover`}
                    onError={(e) => {
                      e.target.src = 'https://via.placeholder.com/400x300?text=Building+Photo';
                    }}
                  />
                  <div className="absolute top-4 left-4 bg-blue-600 text-white text-xs font-semibold px-2 py-1 rounded">
                    {building.floors || 3} {t('academicBuildings.floors', '—ç—Ç–∞–∂–∞')}
                  </div>
                </div>
              </div>
              
              <div className={viewMode === 'list' ? 'w-2/3 p-5' : 'p-5'}>
                <h2 className="text-xl font-bold text-gray-800 mb-2">
                  {getTranslatedField(building, 'name')}
                </h2>
                
                <p className="text-gray-600 mb-4 line-clamp-2">
                  {getTranslatedField(building, 'description')}
                </p>

                <div className="flex items-center text-sm text-gray-500 mb-4">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  </svg>
                  <span className="truncate">{getTranslatedField(building, 'address')}</span>
                </div>

                <div className="flex justify-between items-center">
                  <button
                    onClick={() => setSelectedBuilding(selectedBuilding === building.id ? null : building.id)}
                    className="text-blue-600 hover:text-blue-800 font-medium flex items-center transition-colors"
                  >
                    {selectedBuilding === building.id
                      ? t('academicBuildings.hideDetails', '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏')
                      : t('academicBuildings.showDetails', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')
                    }
                    <svg className={`w-4 h-4 ml-1 transform ${selectedBuilding === building.id ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                  
                  <button 
                    onClick={() => {
                      setSelectedBuilding(building.id);
                      setShowMap(true);
                    }}
                    className="text-gray-500 hover:text-blue-600"
                    title={t('academicBuildings.showOnMap', '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ')}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Expanded Details */}
              {selectedBuilding === building.id && (
                <div className="border-t border-gray-100 p-5 col-span-full">
                  <div className="flex border-b border-gray-200 mb-6">
                    <button
                      className={`py-2 px-4 font-medium ${activeTab === 'overview' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                      onClick={() => setActiveTab('overview')}
                    >
                      {t('academicBuildings.overview', '–û–±–∑–æ—Ä')}
                    </button>
                    <button
                      className={`py-2 px-4 font-medium ${activeTab === 'facilities' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                      onClick={() => setActiveTab('facilities')}
                    >
                      {t('academicBuildings.facilities', '–ü–æ–º–µ—â–µ–Ω–∏—è')}
                    </button>
                    <button
                      className={`py-2 px-4 font-medium ${activeTab === 'gallery' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}
                      onClick={() => setActiveTab('gallery')}
                    >
                      {t('academicBuildings.gallery', '–ì–∞–ª–µ—Ä–µ—è')}
                    </button>
                  </div>

                  {activeTab === 'overview' && (
                    <div className="grid md:grid-cols-2 gap-6">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">{t('academicBuildings.buildingInfo', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏')}</h3>
                        <div className="space-y-3">
                          <div className="flex">
                            <span className="text-gray-600 w-32">{t('academicBuildings.address', '–ê–¥—Ä–µ—Å')}:</span>
                            <span className="text-gray-800">{getTranslatedField(building, 'address')}</span>
                          </div>
                          <div className="flex">
                            <span className="text-gray-600 w-32">{t('academicBuildings.floors', '–≠—Ç–∞–∂–∏')}:</span>
                            <span className="text-gray-800">{building.floors}</span>
                          </div>
                          {building.yearBuilt && (
                            <div className="flex">
                              <span className="text-gray-600 w-32">{t('academicBuildings.yearBuilt', '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏')}:</span>
                              <span className="text-gray-800">{building.yearBuilt}</span>
                            </div>
                          )}
                          {building.totalArea && (
                            <div className="flex">
                              <span className="text-gray-600 w-32">{t('academicBuildings.totalArea', '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å')}:</span>
                              <span className="text-gray-800">{building.totalArea}</span>
                            </div>
                          )}
                          {building.workingHours && (
                            <div className="flex">
                              <span className="text-gray-600 w-32">{t('academicBuildings.workingHours', '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã')}:</span>
                              <span className="text-gray-800">{getTranslatedField(building, 'workingHours')}</span>
                            </div>
                          )}
                          {building.contacts && (
                            <div className="flex">
                              <span className="text-gray-600 w-32">{t('academicBuildings.contacts', '–ö–æ–Ω—Ç–∞–∫—Ç—ã')}:</span>
                              <span className="text-gray-800">
                                {building.contacts.phone && <div>{building.contacts.phone}</div>}
                                {building.contacts.email && <div>{building.contacts.email}</div>}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-4">{t('academicBuildings.quickStats', '–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}</h3>
                        <div className="grid grid-cols-2 gap-4">
                          <div className="bg-blue-50 p-4 rounded-lg text-center">
                            <div className="text-2xl font-bold text-blue-600">
                              {(building.facilities || []).reduce((total, facility) => total + (facility.count || 1), 0)}
                            </div>
                            <div className="text-sm text-gray-600">{t('academicBuildings.rooms', '–ø–æ–º–µ—â–µ–Ω–∏–π')}</div>
                          </div>
                          <div className="bg-green-50 p-4 rounded-lg text-center">
                            <div className="text-2xl font-bold text-green-600">{building.floors || 3}</div>
                            <div className="text-sm text-gray-600">{t('academicBuildings.floors', '—ç—Ç–∞–∂–µ–π')}</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {activeTab === 'facilities' && (
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">{t('academicBuildings.detailedFacilities', '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π')}</h3>
                      <div className="grid md:grid-cols-2 gap-4">
                        {building.facilities.map((facility, index) => (
                          <div key={index} className="bg-gray-50 p-4 rounded-lg flex items-start">
                            <span className="text-2xl mr-3">{facility.icon || 'üìå'}</span>
                            <div>
                              <h4 className="font-semibold text-gray-800">
                                {getTranslatedField(facility, 'name')}
                              </h4>
                              <div className="flex justify-between text-sm text-gray-600 mt-1">
                                <span>{facility.count} {t('academicBuildings.units', '–µ–¥.')}</span>
                                <span>{facility.capacity}</span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {activeTab === 'gallery' && (
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">{t('academicBuildings.photoGallery', '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è')}</h3>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {building.photos.map((photo, index) => (
                          <div key={index} className="relative group cursor-pointer">
                            <img
                              src={photo.url}
                              alt={getTranslatedField(photo, 'caption') || `Photo ${index + 1}`}
                              className="w-full h-40 object-cover rounded-lg"
                              onError={(e) => {
                                e.target.src = 'https://via.placeholder.com/300x200?text=Photo';
                              }}
                            />
                            <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-60 rounded-lg flex items-center justify-center transition-all duration-300">
                              <div className="text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-center">
                                <div className="font-medium">{getTranslatedField(photo, 'caption')}</div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Navigation and Contact Information */}
        <div className="mt-16 bg-gradient-to-r from-blue-600 to-indigo-700 rounded-2xl shadow-xl overflow-hidden">
          <div className="p-8 text-white">
            <h2 className="text-2xl font-bold mb-6">
              {t('academicBuildings.navigationInfo', '–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')}
            </h2>
            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-lg font-semibold mb-4 flex items-center">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  {t('academicBuildings.howToReach', '–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è')}
                </h3>
                <ul className="space-y-3">
                  <li className="flex items-start">
                    <svg className="w-5 h-5 text-blue-300 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {t('academicBuildings.transport1', '–ê–≤—Ç–æ–±—É—Å—ã: ‚Ññ10, ‚Ññ15, ‚Ññ22 –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"')}
                  </li>
                  <li className="flex items-start">
                    <svg className="w-5 h-5 text-blue-300 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {t('academicBuildings.transport2', '–ú–∞—Ä—à—Ä—É—Ç–∫–∏: ‚Ññ105, ‚Ññ120, ‚Ññ130')}
                  </li>
                  <li className="flex items-start">
                    <svg className="w-5 h-5 text-blue-300 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    {t('academicBuildings.parking', '–ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π')}
                  </li>
                </ul>
              </div>

              <div>
                <h3 className="text-lg font-semibold mb-4 flex items-center">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  {t('academicBuildings.contactInfo', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}
                </h3>
                <div className="space-y-3">
                  <div>
                    <strong>{t('academicBuildings.security', '–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')}:</strong>
                    <p>–¢–µ–ª: +996 312 123-000</p>
                  </div>
                  <div>
                    <strong>{t('academicBuildings.maintenance', '–°–ª—É–∂–±–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏')}:</strong>
                    <p>–¢–µ–ª: +996 312 123-111</p>
                  </div>
                  <div>
                    <strong>{t('academicBuildings.reception', '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}:</strong>
                    <p>–¢–µ–ª: +996 312 123-456</p>
                    <p>Email: info@salymbekov.edu.kg</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AcademicBuildings;