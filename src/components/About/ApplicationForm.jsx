import React, { useState } from 'react';

const ApplicationForm = ({ vacancy, onClose }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    coverLetter: '',
    cv: null,
    experience: '',
    motivation: ''
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è';
    }

    if (!formData.email.trim()) {
      newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }

    if (!formData.phone.trim()) {
      newErrors.phone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (!/^[\+]?[0-9\s\-\(\)]{10,}$/.test(formData.phone)) {
      newErrors.phone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (!formData.cv) {
      newErrors.cv = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ';
    } else {
      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!allowedTypes.includes(formData.cv.type)) {
        newErrors.cv = '–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX';
      } else if (formData.cv.size > 5 * 1024 * 1024) {
        newErrors.cv = '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë';
      }
    }

    if (!formData.coverLetter.trim()) {
      newErrors.coverLetter = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ';
    } else if (formData.coverLetter.trim().length < 100) {
      newErrors.coverLetter = '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
      await new Promise(resolve => setTimeout(resolve, 2000));
      

      alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${vacancy.title}"! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
      onClose();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData({...formData, cv: file});
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-8">
          {/* Header */}
          <div className="flex justify-between items-center mb-8">
            <div>
              <h2 className="text-3xl font-bold text-blue-900">
                –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
              </h2>
              <p className="text-xl text-blue-600 mt-2">
                {vacancy.title}
              </p>
              <p className="text-gray-600 mt-1">
                {vacancy.department}
              </p>
            </div>
            <button 
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-3xl"
              disabled={isSubmitting}
            >
              √ó
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Personal Information */}
            <div className="bg-gray-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                üìù –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>
              
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ü–æ–ª–Ω–æ–µ –∏–º—è *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.name ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                  />
                  {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                  </label>
                  <input
                    type="email"
                    required
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      errors.email ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="example@email.com"
                  />
                  {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
                </div>
              </div>

              <div className="mt-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </label>
                <input
                  type="tel"
                  required
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.phone ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="+996 XXX XXX XXX"
                />
                {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
              </div>
            </div>

            {/* Resume Upload */}
            <div className="bg-blue-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                üìé –†–µ–∑—é–º–µ
              </h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ–∑—é–º–µ (CV) *
                </label>
                <input
                  type="file"
                  required
                  accept=".pdf,.doc,.docx"
                  onChange={handleFileChange}
                  className={`w-full px-4 py-3 border border-dashed rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.cv ? 'border-red-300' : 'border-gray-300'
                  }`}
                />
                <p className="text-sm text-gray-500 mt-2">
                  üí° –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤: PDF, DOC, DOCX (–¥–æ 5 –ú–ë)
                </p>
                {errors.cv && <p className="text-red-500 text-sm mt-1">{errors.cv}</p>}
                
                {formData.cv && (
                  <div className="mt-3 p-3 bg-green-50 rounded-lg border border-green-200">
                    <p className="text-sm text-green-700">
                      ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: <strong>{formData.cv.name}</strong> ({Math.round(formData.cv.size / 1024)} –ö–ë)
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Cover Letter */}
            <div className="bg-yellow-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                ‚úâÔ∏è –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
              </h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ *
                </label>
                <textarea
                  rows="6"
                  required
                  value={formData.coverLetter}
                  onChange={(e) => setFormData({...formData, coverLetter: e.target.value})}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.coverLetter ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∫–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç –∏ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞..."
                />
                <div className="flex justify-between items-center mt-2">
                  {errors.coverLetter && <p className="text-red-500 text-sm">{errors.coverLetter}</p>}
                  <p className="text-sm text-gray-500 ml-auto">
                    {formData.coverLetter.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 100)
                  </p>
                </div>
              </div>
            </div>

            {/* Additional Information */}
            <div className="bg-purple-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
                </label>
                <textarea
                  rows="3"
                  value={formData.experience}
                  onChange={(e) => setFormData({...formData, experience: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã..."
                />
              </div>
            </div>

            {/* Privacy Notice */}
            <div className="bg-gray-50 rounded-lg p-4 border-l-4 border-blue-500">
              <p className="text-sm text-gray-700">
                <strong>üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> –û—Ç–ø—Ä–∞–≤–ª—è—è —ç—Ç—É —Ñ–æ—Ä–º—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã.
              </p>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 disabled:opacity-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
              >
                {isSubmitting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ApplicationForm;
